cacheSolve <- function(x=matrix(),...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$getmatrix(m)
m
}
cacheSolve(matrix(1:4,2,2))
cacheSolve <- function(x,...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$getmatrix(m)
m
}
cacheSolve(matrix(1:4,2,2))
makeCacheMatrix <- function(x = matrix()) {
inv<- NULL
set <- function (y) {
x <<- y
inv<<- NULL
}
get <- function () x
setinverse <- function(inverse) inv <<- inverse
getmatrix <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inv<- NULL
set <- function (y) {
x <<- y
inv<<- NULL
}
get <- function () x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
##THIS FUNCTION COMPUTES THE INVERSE OF THE SPECIAL "MATRIX" RETURNED BY
##makeCacheMatrix. IF THE INVERSE HAS ALREADY BEEN CALCULATED AND THE MATRIX
##HAS NOT BEEN CHANGED, THEN THE cachesolve SHOULD RETRIEVE THE INVERSE FROM
##THE CACHE.
##This function computes and outputs the inverse of a matrix.
##First, inverse of a matrix already computed?
##Second, if the inverse of a matrix already exists, there is no computation. Straight output follows.
##Third, if the inverse of a matrix does not exist, then the inverse is computed and stored in cache.
##Fourth, the newly calculated inverse matrix is returned.
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inv<- NULL
set <- function (y) {
x <<- y
inv<<- NULL
}
get <- function () x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
##THIS FUNCTION COMPUTES THE INVERSE OF THE SPECIAL "MATRIX" RETURNED BY
##makeCacheMatrix. IF THE INVERSE HAS ALREADY BEEN CALCULATED AND THE MATRIX
##HAS NOT BEEN CHANGED, THEN THE cachesolve SHOULD RETRIEVE THE INVERSE FROM
##THE CACHE.
##This function computes and outputs the inverse of a matrix.
##First, inverse of a matrix already computed?
##Second, if the inverse of a matrix already exists, there is no computation. Straight output follows.
##Third, if the inverse of a matrix does not exist, then the inverse is computed and stored in cache.
##Fourth, the newly calculated inverse matrix is returned.
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1,2), c(3,4))
m =makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
im<- NULL
set <- function (y) {
x <<- y
im<<- NULL
}
get <- function () x
setinverse <- function(inverse) im <<- inverse
getinverse <- function() im
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
##THIS FUNCTION COMPUTES THE INVERSE OF THE SPECIAL "MATRIX" RETURNED BY
##makeCacheMatrix. IF THE INVERSE HAS ALREADY BEEN CALCULATED AND THE MATRIX
##HAS NOT BEEN CHANGED, THEN THE cachesolve SHOULD RETRIEVE THE INVERSE FROM
##THE CACHE.
##This function computes and outputs the inverse of a matrix.
##First, inverse of a matrix already computed?
##Second, if the inverse of a matrix already exists, there is no computation. Straight output follows.
##Third, if the inverse of a matrix does not exist, then the inverse is computed and stored in cache.
##Fourth, the newly calculated inverse matrix is returned.
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
im <- x$getinverse()
if(!is.null(im)) {
message("getting cached data")
return(im)
}
data <- x$get()
im <- solve(data)
x$setinverse(im)
im
}
x = rbind(c(1,2), c(3,4))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
outcome<-read.csv("outcome-of-care-measures.csv", colClasses="character"
source('~/Desktop/R Programming/rprog-data-ProgAssignment3-data/rankall.R')
?rm.na
?is.na
?stop
?min
?unique
?switch
?col
?dat
?switch
best("MD", "pneumonia")
best <- function(state, outcome) {
##Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
##Check that state and outcome are valid
if (!state %in% unique(outcome[, 7])) {
stop("invalid state")
}
switch(outcome, `heart attack`= {
col=11
},  `heart failure` = {
col=17
},  pneumonia = {
col=23
}, stop("invalid outcome"))
##Return hospital name in that state with lowest 30-day death
##rate
df = outcome[outcome$State == state, c(2, col)]
df[which.min(df[, 2], 1)]
}
best("MD", "pneumonia")
?col
?order()
rm(list=ls())
7/4
4/7
5/2
?std
library(swirl)
swirl()
telegram <- function(...){
paste("START", ... , "STOP")
}
info()
skip()
exit()
rm(list = ls())
library(swirl)
swirl()
submit()
mad_libs("New York", "angry", "statue")
submit()
submit()
submit()
submit()
'I' %p% 'love' %p% 'R!'
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
?points
library(recommendar)
library(recommenderlab)
rm(list=ls())
swirl()
library(swirl)
swirl()
?grep
?factor
library(swirl)
swirl()
View(top_counts)
top_counts_sorted<-arrange(top_counts,count)
setwd(/Users/mindyng)
setwd(Users/mindyng)
setwd("~/")
getwd()
ls()
arrange(top_counts, desc(count))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
by_package<-group_by(cran, package)
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum,count>679)
ls()
arrange(top_counts, desc(count))
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View()
view(top_unique
)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day<-today()
this_day
year()
year(this_day)
wkday(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
second(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd("2014-05-14","2014-09-22","2014-07-11")
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55))
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours=8,minutes=35,seconds=10)
this_moment
?now
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-(depart+hours(15),minutes(50))
arrive<-(depart+hours(15)+minutes(50))
?with_tx
?with_tz
arrive<-with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
head()
ls()
head(pollution)
dim(pollution)
summary(pollution$pm25)
ls()
quantile(ppm)
boxplot(ppm,color="blue")
boxplot(ppm, color=blues)
boxplot(ppm, color=blue)
boxplot(ppm, col="blue")
abline(ppm,h=12)
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green",breaks=100)
hist(ppm)
hist(ppm, col="green")
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm, col="magenta",lwd=4))
abline(v=median(ppm), col="magenta",lwd=4))
abline(v=median(ppm), col="magenta",lwd=4)
names(pollution)
reg<-table(pollution$region)
reg
barplot(reg)
barplot(reg, col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1)
}
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution="east")
east<-subset(pollution, region="east")
east<-subset(pollution,region=="east")
head(east)
hist(east$pm25,col="green")
west<-subset(pollution,region=="west")
hist(subset(pollution,region=="west",col="green")
}
hist(subset(pollution,region=="west",col="green")
hist(subset(pollution,region=="west",col="green")
hist(subset(pollution,region=="west",col="green"))
hist(subset(pollution,region=="west")$pm25,col="green")
bye()
swirl()
library(swirl)
swirl()
bye()
library(swirl)
swirl()
str(pollution)
with(pollution, plot(latitude,pm25))
with(abline=12, lwd=2,lty=2)
with(pollution,abline=12,lwd=2,lty=2)
with(pollution)
help()
with(pollution, plot(latitude,pm25),abline=12,lwd=2,lty=2)
abline(h=12,lwd=2,lty=2)
bye()
library(knitr)
knitr()
install.packages(knitr)
swirl()
library(swirl)
swirl()
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
0.64
.64
mypdf
?integrate
integrate(dnorm, 0, 1.6)
integrate(mypdf, 0, 1.6)
0.32
1.41
skip()
0.00097
0.000997
0.984015
0.014985
0.06238268051
quit()
swirl()
library(swirl)
swirl()
4
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<-lm(y~x)
est<-predict(fit,data.frame(x))
plot(x,y)
abline(fit, col="red")
summary(fit)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y~x)
predict(fit, data.frame(x=mean(x)), interval="confidence")
?mtcars
fit<-lm(mpg~wt, data=mtcars)
predict(fit, data.frame(wt=3), interval="prediction")
>?mtcars
summary(mtcars)
str(mtcars)
max(mtcars$mpg)
mtcars$mpg
sort(mtcars$mpg)
head(mtcars$mpg,25)
rownames(head(mtcars$mpg,20))
mpg<-mtcars$mpg
head(mpg, 10)
topten<-head(mpg, 10)
rownames(topten)
rownames(topten)<-1:10
?step
>mtcars
?mtcars
setwd("~/Desktop/Developing_Data_Products/CourseProject")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(rsconnect)
shinyapps::setAccountInfo(name='mindy',
token='844127C0119447023167961FF4616D20',
secret='<SECRET>')
library(shiny)
library(rsconnect)
deployApp()
deployApp(CourseProject)
setwd("~/Desktop/Developing_Data_Products")
deployApp(CourseProject)
library(rsconnect)
deployApp()
setwd("~/Desktop/Developing_Data_Products/DDPCP")
setwd("~/Desktop/Developing_Data_Products/CourseProject")
deployApp()
shinyapps::setAccountInfo(name='mindy', token='844127C0119447023167961FF4616D20', secret='KdOjju/djLNPQ/mPEJEUdtZS8YL2bQnDYWqPgW4B')
library(shiny)
runApp()
library(rsconnect)
deployApp()
deployApp(CourseProject)
deployApp()
shinyapps::setAccountInfo(name='mindy', token='844127C0119447023167961FF4616D20', secret='KdOjju/djLNPQ/mPEJEUdtZS8YL2bQnDYWqPgW4B')
deployApp(CourseProject)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
